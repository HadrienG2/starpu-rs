# There are two kinds of continuous integration jobs in this project:
#
# - Every code submission or master push passes continuous integration on the
#   minimal supported Rust version and the current stable Rust version.
# - Two times a month, a scheduled job makes sure that the code remains
#   compatible and lint-free on upcoming Rust toolchains (beta and nightly).

name: Continuous Integration

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 14/15 * *'

# Cancel existing jobs on new pushes to the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  LLVM_VERSION: 15  # Change this when switching Ubuntu releases
  LIBCLANG_PATH: /usr/lib/llvm-15  # Change this when switching Ubuntu releases
  MINIMAL_RUST: '1.78.0'  # Minimal Supported Rust Version
  PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig/
  RUSTFLAGS: '-D warnings'
  RUSTDOCFLAGS: '-D warnings'
  RUST_LOG: 'warn'

jobs:
  # Workaround for github CI dropping env var expansion in matrix strategy
  matrix_vars:
    # Don't run CI twice when a PR is created from a branch internal to the repo
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-22.04

    outputs:
      MINIMAL_RUST: ${{ env.MINIMAL_RUST }}
      
    steps:
      - name: Forward env var to output
        run: echo "MINIMAL_RUST=${{ env.MINIMAL_RUST }}" >> $GITHUB_OUTPUT


  # Formatter output doesn't depend on cargo features, and only needs to be
  # tested on the latest supported release of each CI run.
  #
  # At the moment, we don't have optional cargo features, and we only test on
  # one OS, so we also check clippy lints here.
  #
  # We don't care about warnings on the minimum supported Rust version, only
  # about building and running correctly.
  format-lints:
    # Don't run CI twice when a PR is created from a branch internal to the repo
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-22.04

    env:
      # OpenCL feature is needed on Ubuntu because their StarPU is built with it
      JOB_FLAGS: '--workspace --features=opencl'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up stable toolchain
        if: github.event_name != 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy

      - name: Set up nightly toolchain
        if: github.event_name == 'schedule'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt,clippy

      - name: Install dependencies using APT
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages: libstarpu-dev libclang1-${{ env.LLVM_VERSION }}

      - name: Check format
        run: cargo fmt --all --check




      - name: DEBUG where the fuck is my starpu
        run: |
          apt update && apt search starpu
          find /usr -name "libstarpu.pc"




      - name: Check clippy lints
        run: cargo clippy ${{ env.JOB_FLAGS }} --all-targets -- -D warnings

      - name: Build docs
        run: cargo doc ${{ env.JOB_FLAGS }}

      - name: Check semver compliance
        uses: obi1kenobi/cargo-semver-checks-action@v2
        with:
          package: starpu-sys # TODO: Extend once high-level starpu crate is released
          feature-group: default-features
          features: ${{ matrix.features }}
          rust-toolchain: manual


  # Run the tests and examples on all supported OSes and Rust versions (main CI)
  test-contrib-debug:
    # Don't run CI twice when a PR is created from a branch internal to the repo
    # Don't run in scheduled jobs, that's what test-scheduled is for
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-22.04

    needs: matrix_vars

    strategy:
      matrix:
        rust:
          - stable
          - ${{ needs.matrix_vars.outputs.MINIMAL_RUST }}

    env:
      FEATURES_FLAG: '--features=opencl'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install dependencies using APT
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages: libstarpu-dev libclang1-${{ env.LLVM_VERSION }}

      - name: Run tests
        run: cargo test --workspace ${{ env.FEATURES_FLAG }}

      - name: Install cargo-examples
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-examples

      - name: Run all examples
        run: cargo examples ${{ env.FEATURES_FLAG }}


  # Run the tests and examples on all supported OSes and Rust versions,
  # in release mode
  #
  # Some things like UB or arithmetic overflow differ between debug and release
  # builds, so it's a good idea to run the tests in release mode too.
  #
  # We do not do this in the test-contrib-debug job because switching between
  # debug and release builds trashes the cargo cache.
  test-contrib-release:
    # Don't run CI twice when a PR is created from a branch internal to the repo
    # Don't run in scheduled jobs, that's what test-scheduled is for
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-22.04

    needs: matrix_vars

    strategy:
      matrix:
        rust:
          - stable
          - ${{ needs.matrix_vars.outputs.MINIMAL_RUST }}

    env:
      FEATURES_FLAG: '--features=opencl'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install dependencies using APT
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages: libstarpu-dev libclang1-${{ env.LLVM_VERSION }}

      - name: Run unit and doc tests
        run: cargo test --workspace --release ${{ env.FEATURES_FLAG }}

      - name: Install cargo-examples
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-examples

      - name: Run all examples
        run: cargo examples ${{ env.FEATURES_FLAG }} -- --release


  # Run the tests with extra stdlib checks and the ASAN sanitizer
  test-careful:
    # Don't run CI twice when a PR is created from a branch internal to the repo
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-22.04

    env:
      JOB_FLAGS: '--workspace --features=opencl'
      # cargo-careful uses the nightly compiler, but runs in the stable CI, so
      # we must disable warnings-as-error to avoid breaking submitted PRs when
      # a new lint gets added to nightly rustc
      RUSTFLAGS: ''

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rust-src

      - name: Install dependencies using APT
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages: libstarpu-dev libclang1-${{ env.LLVM_VERSION }}

      - name: Install cargo-careful
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-careful

      - name: Run unit and doc tests under cargo careful, with ASAN
        run: |
          # By default, cargo-careful disables LeakChecker, but I actually like it
          export ASAN_OPTIONS=''
          cargo careful test -Zcareful-sanitizer=address ${{ env.JOB_FLAGS }}


  # Test current code coverage
  test-coverage:
    # Don't run CI twice when a PR is created from a branch internal to the repo
    # Don't run in scheduled jobs, coverage doesn't change on its own
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository

    runs-on: ubuntu-22.04

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install dependencies using APT
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages: libstarpu-dev libclang1-${{ env.LLVM_VERSION }}

      - name: Install cargo-tarpaulin
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-tarpaulin

      - name: Measure code coverage
        run: cargo tarpaulin --verbose --timeout 120 --out xml

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS
          fail_ci_if_error: true
          verbose: true


  # Check compatibility with newer Rust/deps versions (scheduled CI)
  #
  # We aren't concerned about trashing the cargo cache here since these jobs
  # only run occasionally, so the extra convenience and maintainability of
  # grouping debug and release tests trumps other considerations.
  #
  # FIXME: There should be a way to use conditional build matrices without
  #        duplicating the whole job recipe...
  #
  test-scheduled:
    if: github.event_name == 'schedule'

    runs-on: ubuntu-22.04

    needs: matrix_vars

    strategy:
      matrix:
        rust:
          - beta
          - nightly
          - ${{ needs.matrix_vars.outputs.MINIMAL_RUST }}

    env:
      FEATURES_FLAG: '--features=opencl'

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Set up toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install dependencies using APT
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          version: 1.0
          packages: libstarpu-dev libclang1-${{ env.LLVM_VERSION }}

      - name: Install cargo-examples
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-examples

      - name: Run basic tests (debug build)
        run: cargo test --workspace ${{ env.FEATURES_FLAG }}

      - name: Run all examples (debug build)
        run: cargo examples ${{ env.FEATURES_FLAG }}

      - name: Run all examples (release build)
        run: cargo examples ${{ env.FEATURES_FLAG }} -- --release

      - name: Run basic tests (release build)
        run: cargo test --workspace --release ${{ env.FEATURES_FLAG }}